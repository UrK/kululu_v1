 
// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    public static Kululu.Web.Controllers.AccountController Account = new Kululu.Web.Controllers.T4MVC_AccountController();
    public static Kululu.Web.Controllers.FacebookController Facebook = new Kululu.Web.Controllers.T4MVC_FacebookController();
    public static Kululu.Web.Controllers.FbStreamHarvestController FbStreamHarvest = new Kululu.Web.Controllers.T4MVC_FbStreamHarvestController();
    public static Kululu.Web.Controllers.LocalBusinessController LocalBusiness = new Kululu.Web.Controllers.T4MVC_LocalBusinessController();
    public static Kululu.Web.Controllers.PlaylistController Playlist = new Kululu.Web.Controllers.T4MVC_PlaylistController();
    public static T4MVC.FbGraphController FbGraph = new T4MVC.FbGraphController();
    public static T4MVC.MobileController Mobile = new T4MVC.MobileController();
    public static T4MVC.SettingsController Settings = new T4MVC.SettingsController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
}

   
namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result) {
            return htmlHelper.BeginForm(result, FormMethod.Post);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(result.GetRouteValueDictionary());
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.BeginForm(result, ajaxOptions, null);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return BeginForm(ajaxHelper, result, ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return ajaxHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            if ((namespaces == null) && (context.Namespaces != null)) {
                 namespaces = context.Namespaces.ToArray();
            }
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            bool useNamespaceFallback = (namespaces == null) || (namespaces.Length == 0);
            route.DataTokens["UseNamespaceFallback"] = useNamespaceFallback;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC was called incorrectly. You may need to force it to regenerate by right clicking on T4MVC.tt and choosing Run Custom Tool");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                currentRouteValues.Add(pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection) {
            // Copy all the values from the NameValueCollection into the route dictionary
            nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            routeValues.Add(name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValueDictionary = new RouteValueDictionary();
            result.RouteValueDictionary.Add("Area", area ?? ""); 
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}



namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}


  

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; }   
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult {
    public T4MVC_JsonResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_PartialViewResult : System.Web.Mvc.PartialViewResult, IT4MVCActionResult {
    public T4MVC_PartialViewResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ajax.min.js") ? Url("ajax.min.js") : Url("ajax.js");
                      
        public static readonly string allmin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/allmin.min.js") ? Url("allmin.min.js") : Url("allmin.js");
                      
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class autocomplete {
            private const string URLPATH = "~/Scripts/autocomplete";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_tokeninput_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.tokeninput.min.js") ? Url("jquery.tokeninput.min.js") : Url("jquery.tokeninput.js");
                          
            public static readonly string token_input_facebook_css = Url("token-input-facebook.css");
        }
    
        public static readonly string bbcode_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bbcode.min.js") ? Url("bbcode.min.js") : Url("bbcode.js");
                      
        public static readonly string blockmessage_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/blockmessage.min.js") ? Url("blockmessage.min.js") : Url("blockmessage.js");
                      
        public static readonly string chart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/chart.min.js") ? Url("chart.min.js") : Url("chart.js");
                      
        public static readonly string chartAux_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/chartAux.min.js") ? Url("chartAux.min.js") : Url("chartAux.js");
                      
        public static readonly string core_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/core.min.js") ? Url("core.min.js") : Url("core.js");
                      
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class dateTimePicker {
            private const string URLPATH = "~/Scripts/dateTimePicker";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string dateTimePicker_css = Url("dateTimePicker.css");
            public static readonly string jquery_ui_timepicker_addon_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-timepicker-addon.min.js") ? Url("jquery-ui-timepicker-addon.min.js") : Url("jquery-ui-timepicker-addon.js");
                          
        }
    
        public static readonly string extensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/extensions.min.js") ? Url("extensions.min.js") : Url("extensions.js");
                      
        public static readonly string facebook_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/facebook.min.js") ? Url("facebook.min.js") : Url("facebook.js");
                      
        public static readonly string flashmessage_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/flashmessage.min.js") ? Url("flashmessage.min.js") : Url("flashmessage.js");
                      
        public static readonly string guiders_1_1_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/guiders-1.1.2.min.js") ? Url("guiders-1.1.2.min.js") : Url("guiders-1.1.2.js");
                      
        public static readonly string jquery_jqote2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.jqote2.min.js") ? Url("jquery.jqote2.min.js") : Url("jquery.jqote2.js");
                      
        public static readonly string jquery_timeline_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.timeline.min.js") ? Url("jquery.timeline.min.js") : Url("jquery.timeline.js");
                      
        public static readonly string jquery_tipsy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.tipsy.min.js") ? Url("jquery.tipsy.min.js") : Url("jquery.tipsy.js");
                      
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
                      
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string kululu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/kululu.min.js") ? Url("kululu.min.js") : Url("kululu.js");
                      
        public static readonly string less_1_1_4_min_js = Url("less-1.1.4.min.js");
        public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                      
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class mbrevoort_jquery_facebook_multi_friend_selector_aad960a {
            private const string URLPATH = "~/Scripts/mbrevoort-jquery-facebook-multi-friend-selector-aad960a";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_facebook_multifriend_select_list_css = Url("jquery.facebook.multifriend.select-list.css");
            public static readonly string jquery_facebook_multifriend_select_css = Url("jquery.facebook.multifriend.select.css");
            public static readonly string jquery_facebook_multifriend_select_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.facebook.multifriend.select.min.js") ? Url("jquery.facebook.multifriend.select.min.js") : Url("jquery.facebook.multifriend.select.js");
                          
            public static readonly string README = Url("README");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Mobile {
            private const string URLPATH = "~/Scripts/Mobile";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string kululuMobile_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/kululuMobile.min.js") ? Url("kululuMobile.min.js") : Url("kululuMobile.js");
                          
            public static readonly string playlistMobile_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/playlistMobile.min.js") ? Url("playlistMobile.min.js") : Url("playlistMobile.js");
                          
            public static readonly string playlistViewMobile_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/playlistViewMobile.min.js") ? Url("playlistViewMobile.min.js") : Url("playlistViewMobile.js");
                          
        }
    
        public static readonly string player_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/player.min.js") ? Url("player.min.js") : Url("player.js");
                      
        public static readonly string settings_index_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/settings-index.min.js") ? Url("settings-index.min.js") : Url("settings-index.js");
                      
        public static readonly string settings_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/settings.min.js") ? Url("settings.min.js") : Url("settings.js");
                      
        public static readonly string wall_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wall.min.js") ? Url("wall.min.js") : Url("wall.js");
                      
        public static readonly string welcome_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/welcome.min.js") ? Url("welcome.min.js") : Url("welcome.js");
                      
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class css {
            private const string URLPATH = "~/Content/css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string allmin_ltr_css = Url("allmin_ltr.css");
            public static readonly string allmin_rtl_css = Url("allmin_rtl.css");
            public static readonly string blockmessage_css = Url("blockmessage.css");
            public static readonly string chart_less = Url("chart.less");
            public static readonly string chart_ltr_css = Url("chart_ltr.css");
            public static readonly string chart_rtl_css = Url("chart_rtl.css");
            public static readonly string dialogs_less = Url("dialogs.less");
            public static readonly string dialogs_ltr_css = Url("dialogs_ltr.css");
            public static readonly string dialogs_rtl_css = Url("dialogs_rtl.css");
            public static readonly string guiders_1_1_2_less = Url("guiders-1.1.2.less");
            public static readonly string guiders_1_1_2_ltr_css = Url("guiders-1.1.2_ltr.css");
            public static readonly string guiders_1_1_2_rtl_css = Url("guiders-1.1.2_rtl.css");
            public static readonly string IEFilters_css = Url("IEFilters.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images {
                private const string URLPATH = "~/Content/css/images";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string ui_bg_diagonals_thick_18_b81900_40x40_png = Url("ui-bg_diagonals-thick_18_b81900_40x40.png");
                public static readonly string ui_bg_diagonals_thick_20_666666_40x40_png = Url("ui-bg_diagonals-thick_20_666666_40x40.png");
                public static readonly string ui_bg_flat_10_000000_40x100_png = Url("ui-bg_flat_10_000000_40x100.png");
                public static readonly string ui_bg_glass_100_f6f6f6_1x400_png = Url("ui-bg_glass_100_f6f6f6_1x400.png");
                public static readonly string ui_bg_glass_100_fdf5ce_1x400_png = Url("ui-bg_glass_100_fdf5ce_1x400.png");
                public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                public static readonly string ui_bg_gloss_wave_35_f6a828_500x100_png = Url("ui-bg_gloss-wave_35_f6a828_500x100.png");
                public static readonly string ui_bg_highlight_soft_100_eeeeee_1x100_png = Url("ui-bg_highlight-soft_100_eeeeee_1x100.png");
                public static readonly string ui_bg_highlight_soft_75_ffe45c_1x100_png = Url("ui-bg_highlight-soft_75_ffe45c_1x100.png");
                public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                public static readonly string ui_icons_228ef1_256x240_png = Url("ui-icons_228ef1_256x240.png");
                public static readonly string ui_icons_ef8c08_256x240_png = Url("ui-icons_ef8c08_256x240.png");
                public static readonly string ui_icons_ffd27a_256x240_png = Url("ui-icons_ffd27a_256x240.png");
                public static readonly string ui_icons_ffffff_256x240_png = Url("ui-icons_ffffff_256x240.png");
            }
        
            public static readonly string katom_oebold_webfont_eot = Url("katom_oebold-webfont.eot");
            public static readonly string katom_oebold_webfont_svg = Url("katom_oebold-webfont.svg");
            public static readonly string katom_oebold_webfont_woff = Url("katom_oebold-webfont.woff");
            public static readonly string kululu_ie_css = Url("kululu-ie.css");
            public static readonly string kululu_less = Url("kululu.less");
            public static readonly string kululu_ltr_css = Url("kululu_ltr.css");
            public static readonly string kululu_rtl_css = Url("kululu_rtl.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class language {
                private const string URLPATH = "~/Content/css/language";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string direction_less = Url("direction.less");
                public static readonly string ltr_css = Url("ltr.css");
                public static readonly string ltr_less = Url("ltr.less");
                public static readonly string rtl_css = Url("rtl.css");
                public static readonly string rtl_less = Url("rtl.less");
            }
        
            public static readonly string leaderboard_less = Url("leaderboard.less");
            public static readonly string leaderboard_ltr_css = Url("leaderboard_ltr.css");
            public static readonly string leaderboard_rtl_css = Url("leaderboard_rtl.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class mobile {
                private const string URLPATH = "~/Content/css/mobile";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string kululuMobile_css = Url("kululuMobile.css");
                public static readonly string playlistMobile_css = Url("playlistMobile.css");
            }
        
            public static readonly string player_css = Url("player.css");
            public static readonly string playlist_less = Url("playlist.less");
            public static readonly string playlist_ltr_css = Url("playlist_ltr.css");
            public static readonly string playlist_rtl_css = Url("playlist_rtl.css");
            public static readonly string reset_css = Url("reset.css");
            public static readonly string settings_index_less = Url("settings-index.less");
            public static readonly string settings_index_ltr_css = Url("settings-index_ltr.css");
            public static readonly string settings_index_rtl_css = Url("settings-index_rtl.css");
            public static readonly string settings_css = Url("settings.css");
            public static readonly string timeline_css = Url("timeline.css");
            public static readonly string wall_less = Url("wall.less");
            public static readonly string wall_ltr_css = Url("wall_ltr.css");
            public static readonly string wall_rtl_css = Url("wall_rtl.css");
            public static readonly string welcome_less = Url("welcome.less");
            public static readonly string welcome_ltr_css = Url("welcome_ltr.css");
            public static readonly string welcome_rtl_css = Url("welcome_rtl.css");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class headers {
            private const string URLPATH = "~/Content/headers";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string _107307049326456_header_jpg = Url("107307049326456_header.jpg");
            public static readonly string _121719627868385_header_jpg = Url("121719627868385_header.jpg");
            public static readonly string _127174283963945_header_jpg = Url("127174283963945_header.jpg");
            public static readonly string _127174283963945_like_jpg = Url("127174283963945_like.jpg");
            public static readonly string _135859206490031_header_jpg = Url("135859206490031_header.jpg");
            public static readonly string _147147965366825_header_png = Url("147147965366825_header.png");
            public static readonly string _147147965366825_like_png = Url("147147965366825_like.png");
            public static readonly string _147584488610340_header_jpg = Url("147584488610340_header.jpg");
            public static readonly string _147584488610340_like_jpg = Url("147584488610340_like.jpg");
            public static readonly string _183757838231_header_jpg = Url("183757838231_header.jpg");
            public static readonly string _8842222386_header_png = Url("8842222386_header.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class img {
            private const string URLPATH = "~/Content/img";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ajax_loader_gif = Url("ajax-loader.gif");
            public static readonly string ajax_loader2_gif = Url("ajax-loader2.gif");
            public static readonly string ajax_loader3_gif = Url("ajax-loader3.gif");
            public static readonly string arrows_png = Url("arrows.png");
            public static readonly string bg_stripes_png = Url("bg_stripes.png");
            public static readonly string bg_stripes03_png = Url("bg_stripes03.png");
            public static readonly string default_feedback_png = Url("default_feedback.png");
            public static readonly string default_periodic_png = Url("default_periodic.png");
            public static readonly string facebook_login_png = Url("facebook_login.png");
            public static readonly string favicon_ico = Url("favicon.ico");
            public static readonly string header_png = Url("header.png");
            public static readonly string img_trans_gif = Url("img_trans.gif");
            public static readonly string like_world_jpg = Url("like_world.jpg");
            public static readonly string logo_png = Url("logo.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class mobile {
                private const string URLPATH = "~/Content/img/mobile";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string contactUs_png = Url("contactUs.png");
                public static readonly string contentBg_png = Url("contentBg.png");
                public static readonly string facebook_png = Url("facebook.png");
                public static readonly string header_iphoneBattery_png = Url("header-iphoneBattery.png");
                public static readonly string header_iphoneStatistics_png = Url("header-iphoneStatistics.png");
                public static readonly string header_left_png = Url("header-left.png");
                public static readonly string header_right_png = Url("header-right.png");
                public static readonly string header_png = Url("header.png");
                public static readonly string headerBG_png = Url("headerBG.png");
                public static readonly string nowPlaying_hover_png = Url("nowPlaying-hover.png");
                public static readonly string playlist_png = Url("playlist.png");
                public static readonly string youtube_png = Url("youtube.png");
            }
        
            public static readonly string nav_png = Url("nav.png");
            public static readonly string navSprite_png = Url("navSprite.png");
            public static readonly string options_default_png = Url("options_default.png");
            public static readonly string options_hover_png = Url("options_hover.png");
            public static readonly string player_buttons_png = Url("player_buttons.png");
            public static readonly string searchloader_png = Url("searchloader.png");
            public static readonly string smallLike_png = Url("smallLike.png");
            public static readonly string stripes_back_png = Url("stripes_back.png");
            public static readonly string tipsy_gif = Url("tipsy.gif");
            public static readonly string votes_sprites_png = Url("votes_sprites.png");
            public static readonly string welcome_jpg = Url("welcome.jpg");
        }
    
        public static readonly string login_button_png = Url("login-button.png");
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}




	

#endregion T4MVC
#pragma warning restore 1591

