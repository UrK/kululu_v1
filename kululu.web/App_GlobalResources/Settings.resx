<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="advance" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="chooseImportPlaylistError" xml:space="preserve">
    <value>You didn't set your import playing</value>
  </data>
  <data name="choseImportPlaylist" xml:space="preserve">
    <value>Playlist to import wall data into</value>
  </data>
  <data name="dailySongLimit" xml:space="preserve">
    <value>Songs a day</value>
  </data>
  <data name="demandLike" xml:space="preserve">
    <value>Require "Like" for using the application</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EditPlaylist" xml:space="preserve">
    <value>Edit playlist</value>
  </data>
  <data name="endDate" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="endDateTitle" xml:space="preserve">
    <value>Voting end date</value>
  </data>
  <data name="endOfVoting" xml:space="preserve">
    <value>Voting ends</value>
  </data>
  <data name="favorite" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="general" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="image" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="import" xml:space="preserve">
    <value>Import new songs</value>
  </data>
  <data name="importExplanation" xml:space="preserve">
    <value>Import new songs reads all the songs for your fan page wall into Kululu application.</value>
  </data>
  <data name="includeEndDate" xml:space="preserve">
    <value>Include end dates</value>
  </data>
  <data name="managers" xml:space="preserve">
    <value>Managers</value>
  </data>
  <data name="manualImport" xml:space="preserve">
    <value>Manual import</value>
  </data>
  <data name="manualImportTitle" xml:space="preserve">
    <value>Import admin posts</value>
  </data>
  <data name="manualPostToWall" xml:space="preserve">
    <value>Periodic posts to wall</value>
  </data>
  <data name="manualPostToWallExplanation" xml:space="preserve">
    <value>Kululu can post periodic messages to your fan page wall. The post will show the leading songs in your default playlist.</value>
  </data>
  <data name="maxSongsTitle" xml:space="preserve">
    <value>Maximum number of songs a user can add per playlist</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="newPlaylist" xml:space="preserve">
    <value>New playlist</value>
  </data>
  <data name="playlist" xml:space="preserve">
    <value>Playlist</value>
  </data>
  <data name="playlistName" xml:space="preserve">
    <value>Name of playlist</value>
  </data>
  <data name="playlists" xml:space="preserve">
    <value>Playlists</value>
  </data>
  <data name="playlistSettings" xml:space="preserve">
    <value>Playlist settings</value>
  </data>
  <data name="postImageOrVideo" xml:space="preserve">
    <value>Type of wall post: video/image</value>
  </data>
  <data name="postImageOrVideoExplanation" xml:space="preserve">
    <value>When posting a message to your fan page's wall, will it be a video or an image? We recommand choosing a picture, otherise content might be filtered by your page's spam filter.</value>
  </data>
  <data name="postToWall" xml:space="preserve">
    <value>Post to wall</value>
  </data>
  <data name="ratings" xml:space="preserve">
    <value>Votes</value>
  </data>
  <data name="removeManager" xml:space="preserve">
    <value>Remove manager</value>
  </data>
  <data name="setDefaultPlaylist" xml:space="preserve">
    <value>Set as default</value>
  </data>
  <data name="songLimit" xml:space="preserve">
    <value>Songs</value>
  </data>
  <data name="songLimitTitle" xml:space="preserve">
    <value>Song limit</value>
  </data>
  <data name="songs" xml:space="preserve">
    <value>Songs</value>
  </data>
  <data name="synchornizeNow" xml:space="preserve">
    <value>Synchornize now</value>
  </data>
  <data name="synchronize" xml:space="preserve">
    <value>Synchronize with facebook</value>
  </data>
  <data name="synchronizeExplanation" xml:space="preserve">
    <value>Synchronization process updates the likes and comments for each song that appear in your page's playlists. Synchronization runs automatically every few minutes.</value>
  </data>
  <data name="synchronizeManually" xml:space="preserve">
    <value>You can manually synchronize your playlists any time: </value>
  </data>
  <data name="timedUpdatePosts" xml:space="preserve">
    <value>Periodic status updates</value>
  </data>
  <data name="updateWallAdmin" xml:space="preserve">
    <value>Update wall when admin adds a new song</value>
  </data>
  <data name="updateWallUser" xml:space="preserve">
    <value>Update wall when user adds a new song</value>
  </data>
  <data name="user" xml:space="preserve">
    <value>ser</value>
  </data>
  <data name="video" xml:space="preserve">
    <value>Video</value>
  </data>
  <data name="viewProfile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="what" xml:space="preserve">
    <value>What?</value>
  </data>
  <data name="disable" xml:space="preserve">
    <value>Disable</value>
  </data>
  <data name="enable" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="_new" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="settingLanguageSelectorLabel" xml:space="preserve">
    <value>Language:</value>
  </data>
  <data name="settingsLanguage" xml:space="preserve">
    <value>Default language:</value>
  </data>
  <data name="settingsLanguageExplanation" xml:space="preserve">
    <value>Default language for users of the application</value>
  </data>
  <data name="settingsLanguageUserSelected" xml:space="preserve">
    <value>&lt;User selected&gt;</value>
  </data>
</root>